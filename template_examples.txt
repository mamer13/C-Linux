template <typename T>
void swapValues(T &a, T &b) {
    T temp = a;
    a = b;
    b = temp;
}

int main() {
    int x = 5, y = 10;
    swapValues(x, y); // works with int
    // x = 10, y = 5

    double a = 1.5, b = 2.5;
    swapValues(a, b); // works with double
    // a = 2.5, b = 1.5
} 
////////////////////////////////////////////////////////
template <typename T>
T getMax(T a, T b) {
    return (a > b) ? a : b;
}

int main() {
    cout << getMax(5, 10) << endl;      // 10
    cout << getMax(3.5, 2.1) << endl;   // 3.5
    cout << getMax('A', 'Z') << endl;   // 'Z'
}
////////////////////////////////////////////////////////
#include <iostream>
using namespace std;

template <typename T>
class Stack {
private:
    T data[100];
    int top;
public:
    Stack() { top = -1; }
    void push(T val) { data[++top] = val; }
    T pop() { return data[top--]; }
    bool isEmpty() { return top == -1; }
};

int main() {
    Stack<int> s1;
    s1.push(10);
    s1.push(20);
    cout << s1.pop() << endl; // 20

    Stack<double> s2;
    s2.push(1.5);
    s2.push(2.5);
    cout << s2.pop() << endl; // 2.5
}
////////////////////////////////////////////////////////
template <typename T1, typename T2>
void printPair(T1 a, T2 b) {
    cout << a << " " << b << endl;
}

int main() {
    printPair(5, 3.14);        // 5 3.14
    printPair("Hello", 100);   // Hello 100
}
////////////////////////////////////////////////////////
template <typename T, size_t N>
constexpr size_t getSize(T (&)[N]) {
    return N;
}
int arr[] = { 1, 2, 3, 4, 5 };
std::cout << "Array size is: " << getSize(arr) << endl; // prints 5

int arr[10];
constexpr size_t size = getSize(arr); // known at compile time
int newArr[size]; // valid
////////////////////////////////////////////////////////
