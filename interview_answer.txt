#include <gtest/gtest.h>
void reverseArray(int* arr, int size)
{
    int* start = &arr[0];
    int* end = &arr[size - 1];
    int temp;
    while (start < end)
    {
        temp = *start;
        *start = *end;
        *end = temp;
        start++;
        end--;
    }
}
template <typename T, size_t N>
constexpr size_t getSize(T (&)[N]) {
    return N;
}


TEST(ReverseArrayTest, NegativeTest) {
    int arr[] = {1, 2, 3, 4, 5};
    int incorrect[] = {1, 2, 3, 4, 5}; // original, not reversed

    reverseArray(arr, 5);

    // The reversed array should NOT match the original
    for (int i = 0; i < 5; i++) {
        EXPECT_NE(arr[i], incorrect[i]);
    }
}
TEST(ReverseArrayTest, PositiveTest) {
    int arr[] = {1, 2, 3, 4, 5};
    int expected[] = {5, 4, 3, 2, 1};

    reverseArray(arr, 5);

    for (int i = 0; i < 5; i++) {
        EXPECT_EQ(arr[i], expected[i]);
    }
}
int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);

    int repeat = 5; // number of times to run
    int result = 0;
    for (int i = 0; i < repeat; i++) {
        std::cout << "Run #" << i+1 << std::endl;
        result = RUN_ALL_TESTS();
        if (result != 0) break; // stop on failure
    }

    return result;
}
//////////////////////////////////
run_reverse.sh:
#!/bin/bash
g++ reverse.cpp -o reverse.exe
for i in {1..3}
do
    echo "Run #$i"
    ./reverse.exe
done
//////////////////////////////////
chmod +x run_reverse.sh
./run_reverse.sh